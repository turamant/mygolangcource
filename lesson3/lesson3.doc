                                Введение

Пакет Go net/http предоставляет множество функций для протокола HTTP.
Одна вещь, которую он делает не очень хорошо, это сложная маршрутизация запросов,
например сегментация URL-адреса запроса на отдельные параметры.
К счастью, для этого есть очень популярный пакет, который хорошо известен хорошим
качеством кода в сообществе Go. В этом примере вы увидите, как использовать
пакет gorilla/mux для создания маршрутов с именованными параметрами,
обработчиками GET/POST и ограничениями домена.

                            Установка gorilla/muxпакета
gorilla/mux— это пакет, который адаптируется к HTTP-маршрутизатору Go по умолчанию.
Он поставляется с большим количеством функций для повышения производительности при
написании веб-приложений. Он также соответствует сигнатуре обработчика запросов Go по
умолчанию func (w http.ResponseWriter, r *http.Request), поэтому пакет можно смешивать
и комбинировать с другими HTTP-библиотеками, такими как промежуточное ПО или
существующие приложения.
Используйте команду go get для установки пакета из GitHub следующим образом:
go get -u github.com/gorilla/mux

                            Создание нового маршрутизатора
Сначала создайте новый маршрутизатор запросов. Маршрутизатор является основным 
маршрутизатором для вашего веб-приложения и позже будет передан в качестве параметра
на сервер. Он будет получать все HTTP-соединения и передавать их обработчикам запросов,
которые вы зарегистрируете на нем. Вы можете создать новый маршрутизатор следующим
образом:
r := mux.NewRouter()

                            Регистрация обработчика запросов
Как только у вас появится новый маршрутизатор, вы можете зарегистрировать обработчики
запросов, как обычно. Единственное отличие в том, что вместо вызова
http.HandleFunc(...), вы вызываете HandleFunc на своем маршрутизаторе вот так:
r.HandleFunc(...).

                            Параметры URL-адреса
Самая большая сила Router gorilla/mux— это способность извлекать сегменты из
URL-адреса запроса. В качестве примера, это URL-адрес в вашем приложении:
/books/go-programming-blueprint/page/10

Этот URL-адрес имеет два динамических сегмента:
Слаг названия книги (go-programming-blueprint)
Страница (10)
Чтобы обработчик запросов соответствовал указанному выше URL-адресу, вы заменяете
динамические сегменты заполнителями в шаблоне URL-адреса следующим образом:

r.HandleFunc("/books/{title}/page/{page}", func(w http.ResponseWriter, r *http.Request) {
    // get the book
    // navigate to the page
})

Последнее, что нужно сделать, это получить данные из этих сегментов.
Пакет поставляется с функцией, mux.Vars(r), которая принимает http.Request параметр
и возвращает карту сегментов.

func(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    vars["title"] // the book title slug
    vars["page"] // the page
}

                        Настройка маршрутизатора HTTP-сервера
Вы когда-нибудь задумывались, что означает nil в http.ListenAndServe(":80", nil)?
Это параметр для основного маршрутизатора HTTP-сервера.
По умолчанию это nil, что означает использование маршрутизатора по умолчанию пакета
net/http. Чтобы использовать свой собственный маршрутизатор, замените nil на
переменную вашего маршрутизатора r.

http.ListenAndServe(":80", r)