                                Введение

Пакет Go html/template предоставляет богатый язык шаблонизации для HTML-шаблонов.
Он в основном используется в веб-приложениях для отображения данных в структурированном
виде в браузере клиента. Одним из больших преимуществ языка шаблонизации Go является
автоматическое экранирование данных. Не нужно беспокоиться об атаках XSS,
поскольку Go анализирует HTML-шаблон и экранирует все входные данные перед его
отображением в браузере.

                                Первый шаблон

Написать шаблон в Go очень просто. В этом примере показан список TODO, записанный как
неупорядоченный список (ul) в HTML. При рендеринге шаблонов передаваемые данные могут
быть любым видом структур данных Go. Это может быть простая строка или число, это может
быть даже вложенная структура данных, как в примере ниже. Для доступа к данным в шаблоне
самая верхняя переменная — access by {{.}}. Точка внутри фигурных скобок называется
конвейером и корневым элементом данных.

data := TodoPageData{
    PageTitle: "My TODO list",
    Todos: []Todo{
        {Title: "Task 1", Done: false},
        {Title: "Task 2", Done: true},
        {Title: "Task 3", Done: true},
    },
}

<h1>{{.PageTitle}}</h1>
<ul>
    {{range .Todos}}
        {{if .Done}}
            <li class="done">{{.Title}}</li>
        {{else}}
            <li>{{.Title}}</li>
        {{end}}
    {{end}}
</ul>
                            Структуры управления
Язык шаблонов содержит богатый набор структур управления для отображения вашего HTML.
Здесь вы получите обзор наиболее часто используемых из них. Чтобы получить подробный
список всех возможных структур, посетите: text/template

Структура управления	        Определение
{{/* a comment */}}	            Определяет комментарий
{{.}}	                        Отображает корневой элемент
{{.Title}}	                    Отображает поле «Заголовок» во вложенном элементе.
{{if .Done}} {{else}} {{end}}	Определяет оператор if
{{range .Todos}} {{.}} {{end}}	Просматривает все «Todos» и отображает каждый с помощью{{.}}
{{block "content" .}} {{end}}	Определяет блок с именем «контент»

                            Анализ шаблонов из файлов
Шаблон может быть проанализирован либо из строки, либо из файла на диске. Поскольку это
обычно бывает, что шаблоны проанализированы с диска, этот пример показывает, как это
сделать. В этом примере есть файл шаблона в том же каталоге, что и программа Go,
называемый layout.html.

tmpl, err := template.ParseFiles("layout.html")
// или
tmpl := template.Must(template.ParseFiles("layout.html"))


                        Выполнить шаблон в обработчике запросов
После того, как шаблон проанализирован с диска, он готов к использованию в обработчике
запросов. Функция Execute принимает io.Writer для записи шаблона и interface{} для передачи
данных в шаблон. Когда функция вызывается для http.ResponseWriter заголовка Content-Type,
он автоматически устанавливается в HTTP-ответе на Content-Type: text/html; charset=utf-8.

func(w http.ResponseWriter, r *http.Request) {
    tmpl.Execute(w, "data goes here")
}