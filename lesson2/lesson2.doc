Введение

В этом примере вы узнаете, как создать базовый HTTP-сервер в Go.
Сначала давайте поговорим о том, на что должен быть способен наш HTTP-сервер.
Базовый HTTP-сервер должен выполнять несколько ключевых задач.

1.Обработка динамических запросов: обработка входящих запросов от пользователей,
  которые просматривают веб-сайт, входят в свои учетные записи или публикуют
  изображения.

2.Показ статических ресурсов: показ JavaScript, CSS и изображений в браузерах для
  создания динамического опыта для пользователя.

3.Принимать соединения: HTTP-сервер должен прослушивать определенный порт,
  чтобы иметь возможность принимать соединения из Интернета.

                Обработка динамических запросов
Пакет net/httpсодержит все утилиты, необходимые для приема запросов и их 
динамической обработки. Мы можем зарегистрировать новый обработчик с помощью
http.HandleFunc функции.
Его первый параметр принимает путь для сопоставления и функцию для выполнения в
качестве второго.

В этом примере: Когда кто-то просматривает ваши веб-сайты ( http://example.com/),
будет встречен приятным сообщением.

http.HandleFunc("/", func (w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, "Добро пожаловать на мой вебсайт!")
})

Для динамического аспекта http.Request содержит всю информацию о запросе и его
параметрах. Вы можете прочитать параметры GET с помощью r.URL.Query().Get("token")
или параметры POST (поля из формы HTML) с помощью r.FormValue("email").

                    Обслуживание статических активов
Для обслуживания статических ресурсов, таких как JavaScript, CSS и изображения,
мы используем встроенный http.FileServer и указываем ему путь URL.
Для правильной работы файлового сервера ему необходимо знать, откуда обслуживать
файлы. Мы можем сделать это следующим образом:

fs := http.FileServer(http.Dir("static/"))

Как только наш файловый сервер будет готов, нам просто нужно указать на него
путь URL, как мы делали это с динамическими запросами.
Обратите внимание: для корректной работы с файлами нам нужно убрать часть пути URL.
Обычно это имя каталога, в котором находятся наши файлы.

http.Handle("/static/", http.StripPrefix("/static/", fs))

                        Принимать соединения
Последнее, что нужно сделать, чтобы закончить наш базовый HTTP-сервер, это
прослушивать порт для приема подключений из интернета.
Как вы можете догадаться, Go также имеет встроенный HTTP-сервер, мы можем
запустить его быстро. После запуска вы можете просматривать свой HTTP-сервер
в браузере .

http.ListenAndServe(":80", nil)